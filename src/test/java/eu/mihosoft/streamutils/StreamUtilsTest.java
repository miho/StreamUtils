/*
 * Copyright 2019-2021 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eu.mihosoft.streamutils;

import org.junit.Assert;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.*;

public class StreamUtilsTest {
    @Test public void testReadUntil1() throws IOException {
        String delimiter = "\t";
        String expected = "This is the message."+delimiter;
        String msg = expected+"Should not be read.";

        String actual = StreamUtils.readStringUntilMatches((s)->s.endsWith(delimiter),
                new ByteArrayInputStream(msg.getBytes(StandardCharsets.UTF_8))
        );

        Assert.assertEquals(expected, actual);
    }

    @Test public void testReadUntil2() throws IOException {
        String delimiter = "<Long delimiter>";
        String expected = "This is the message."+delimiter;
        String msg = expected+"Should not be read.";

        String actual = StreamUtils.readStringUntilMatches((s)->s.endsWith(delimiter),
                new ByteArrayInputStream(msg.getBytes(StandardCharsets.UTF_8))
        );

        Assert.assertEquals(expected, actual);
    }

    @Test public void testReadingInputStream() throws IOException {
        String delimiter = "<Long delimiter>";
        String expected = "This is the message."+delimiter;
        String msg = expected+"Should not be read.";

        StreamUtils.ReadingInputStream is = new StreamUtils.ReadingInputStream(
                new ByteArrayInputStream(msg.getBytes(StandardCharsets.UTF_8))
        );

        String actual = StreamUtils.readStringUntilMatches((s)->s.endsWith(delimiter), is);
        String actualFromReadingStream = new String(is.getReadBytes(), StandardCharsets.UTF_8);

        Assert.assertEquals(actual, actualFromReadingStream);
    }
}
